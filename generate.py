#!/usr/bin/env python3

import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse, urlunparse
from datetime import datetime, timedelta
import time

# --- CONFIG ---
MODE = os.getenv("SCRAPER_MODE", "test")  # "test" | "all" | "new_only"
MAX_EPISODES = 5 if MODE == "test" else None
pull_everything = MODE == "all"
pull_new_only = MODE == "new_only"
REQUEST_SLEEP = 1

FEED_FILE = "feed.xml"
BASE_HEADER = """<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>This American Archive</title>
    <link>https://www.thisamericanlife.org</link>
    <description>Autogenerated feed of the This American Life archive.</description>
    <language>en</language>
    <copyright>Copyright Â© Ira Glass / This American Life</copyright>
    <itunes:image href="https://i.imgur.com/pTMCfn9.png"/>
"""

BASE_FOOTER = """
  </channel>
</rss>
"""

# --- LOAD EXISTING EPISODES ---
existing_episodes = set()
if pull_new_only and os.path.exists(FEED_FILE):
    with open(FEED_FILE, "r", encoding="utf-8") as f:
        old_feed = BeautifulSoup(f.read(), "xml")
        for item in old_feed.find_all("item"):
            ep_tag = item.find("itunes:episode")
            if ep_tag:
                existing_episodes.add(ep_tag.text.strip())

# --- SETUP ---
archive_url = "https://www.thisamericanlife.org/archive"
session = requests.Session()
scrape_date_str = datetime.utcnow().strftime("%a, %d %b %Y 00:00:00 +0000")
items_html = ""

# --- SCRAPE ---
while archive_url:
    r = session.get(archive_url)
    content = r.json()["html"] if "application/json" in r.headers.get("Content-Type", "") else r.content
    archive = BeautifulSoup(content, "html.parser")

    count = 0
    for link in archive.select("header > a.goto-episode"):
        if MAX_EPISODES and count >= MAX_EPISODES:
            break

        full_url = urljoin("https://www.thisamericanlife.org", link["href"])
        r_ep = session.get(full_url)
        ep_page = BeautifulSoup(r_ep.content, "html.parser")

        # --- Episode date ---
        date_span = ep_page.select_one("span.date-display-single")
        original_date_str = ""
        if date_span:
            try:
                original_date = datetime.strptime(date_span.text.strip(), "%B %d, %Y")
                original_date_str = original_date.strftime("%Y-%m-%d")
            except Exception:
                pass

        # --- Playlist/audio ---
        title_meta = ep_page.select_one("script#playlist-data")
        if not title_meta:
            continue
        player_data = json.loads(title_meta.string)
        if "audio" not in player_data:
            continue

        ep_num = player_data["title"].split(":", 1)[0].strip()
        title_base = player_data["title"].strip()

        # Skip if new_only and already in feed
        if pull_new_only and ep_num in existing_episodes:
            continue

        audio_url = player_data["audio"]
        final_url = session.head(audio_url, allow_redirects=True).url
        clean_url = urlunparse(urlparse(final_url)._replace(query=""))

        # Skip promos
        if "/promos/" in clean_url:
            continue

        # --- Build description ---
        desc_parts = []
        meta_desc = ep_page.select_one("meta[name='description']")
        if meta_desc:
            desc_parts.append(meta_desc["content"].strip())

        for act in ep_page.select("div.field-items > div.field-item > article.node-act"):
            act_label = act.select_one(".field-name-field-act-label .field-item")
            act_title = act.select_one(".act-header a.goto-act")
            act_desc = act.select_one(".field-name-body .field-item p")
            text = ""
            if act_label: text += act_label.text.strip()
            if act_title and text != act_title.text.strip(): text += f": {act_title.text.strip()}"
            if act_desc: text += f"\n{act_desc.text.strip()}"
            if text: desc_parts.append(text)

        desc_parts.append(f"Originally aired: {original_date_str}")
        full_desc = "\n\n".join(desc_parts)

        # --- Build XML item ---
        item_block = f"""
    <item>
      <title>{title_base}</title>
      <link>{full_url}</link>
      <itunes:episode>{ep_num}</itunes:episode>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:explicit>yes</itunes:explicit>
      <description>{full_desc}</description>
      <pubDate>{scrape_date_str}</pubDate>
      <enclosure url="{clean_url}" type="audio/mpeg"/>
    </item>
"""
        items_html += item_block

        # Optional clean version
        clean_link_tag = ep_page.select_one('a[href*="clean"]')
        if clean_link_tag:
            clean_url = urljoin("https://www.thisamericanlife.org", clean_link_tag["href"])
            clean_item_block = f"""
    <item>
      <title>{title_base} (Clean)</title>
      <link>{full_url}</link>
      <itunes:episode>{ep_num}</itunes:episode>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:explicit>no</itunes:explicit>
      <description>{full_desc}</description>
      <pubDate>{scrape_date_str}</pubDate>
      <enclosure url="{clean_url}" type="audio/mpeg"/>
    </item>
"""
            items_html += clean_item_block

        existing_episodes.add(ep_num)
        count += 1
        time.sleep(REQUEST_SLEEP)

    # --- Next page ---
    next_link = archive.select_one("a.pager")
    archive_url = urljoin("https://www.thisamericanlife.org", next_link["href"]) if pull_everything and next_link else None

# --- WRITE FEED ONLY IF NEW EPISODES ---
if items_html.strip():
    with open(FEED_FILE, "a", encoding="utf-8") as f:
        f.write(items_html)
    print("Feed updated with new episodes.")
else:
    print("No new episodes found.")
